/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => RSVPReaderPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// src/settings/RSVPSettingTab.ts
var import_obsidian = require("obsidian");
var RSVPSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "RSVP \u901F\u8BFB\u589E\u5F3A - \u8BBE\u7F6E" });
    containerEl.createEl("h3", { text: "\u6838\u5FC3\u9605\u8BFB\u8BBE\u7F6E" });
    new import_obsidian.Setting(containerEl).setName("\u9ED8\u8BA4\u9605\u8BFB\u901F\u5EA6").setDesc("\u521D\u59CB\u9605\u8BFB\u901F\u5EA6 (\u5355\u8BCD/\u5206\u949F)").addSlider((slider) => slider.setLimits(200, 1200, 50).setValue(this.plugin.settings.defaultSpeed).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.defaultSpeed = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u667A\u80FD\u6682\u505C").setDesc("\u5728\u6807\u70B9\u7B26\u53F7\u5904\u81EA\u52A8\u5EF6\u957F\u505C\u7559\u65F6\u95F4").addToggle((toggle) => toggle.setValue(this.plugin.settings.enableIntelligentPause).onChange(async (value) => {
      this.plugin.settings.enableIntelligentPause = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u6807\u70B9\u505C\u7559\u500D\u6570").setDesc("\u6807\u70B9\u7B26\u53F7\u5904\u505C\u7559\u65F6\u95F4\u7684\u500D\u6570").addSlider((slider) => slider.setLimits(1, 3, 0.1).setValue(this.plugin.settings.pauseMultiplierForPunctuation).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.pauseMultiplierForPunctuation = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "\u89C6\u89C9\u4E0E\u4EA4\u4E92" });
    new import_obsidian.Setting(containerEl).setName("\u7126\u70B9\u8BCD\u9AD8\u4EAE").setDesc("\u7A81\u51FA\u663E\u793A\u5F53\u524D\u9605\u8BFB\u7684\u8BCD").addToggle((toggle) => toggle.setValue(this.plugin.settings.highlightFocusWord).onChange(async (value) => {
      this.plugin.settings.highlightFocusWord = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u7126\u70B9\u8BCD\u989C\u8272").setDesc("\u9605\u8BFB\u7126\u70B9\u8BCD\u7684\u989C\u8272").addColorPicker((color) => color.setValue(this.plugin.settings.focusWordColor).onChange(async (value) => {
      this.plugin.settings.focusWordColor = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u524D\u8BCD\u989C\u8272").setDesc("\u7126\u70B9\u8BCD\u524D\u90E8\u5206\u7684\u989C\u8272").addColorPicker((color) => color.setValue(this.plugin.settings.beforeFocusColor).onChange(async (value) => {
      this.plugin.settings.beforeFocusColor = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u540E\u8BCD\u989C\u8272").setDesc("\u7126\u70B9\u8BCD\u540E\u90E8\u5206\u7684\u989C\u8272").addColorPicker((color) => color.setValue(this.plugin.settings.afterFocusColor).onChange(async (value) => {
      this.plugin.settings.afterFocusColor = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u5B57\u4F53\u5927\u5C0F").setDesc("\u9605\u8BFB\u6587\u5B57\u7684\u5927\u5C0F(\u50CF\u7D20)").addSlider((slider) => slider.setLimits(16, 48, 2).setValue(this.plugin.settings.fontSize).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.fontSize = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "\u8BA4\u77E5\u589E\u5F3A\u529F\u80FD" });
    new import_obsidian.Setting(containerEl).setName("\u547C\u5438\u5F15\u5BFC").setDesc("\u6839\u636E\u9605\u8BFB\u901F\u5EA6\u63D0\u4F9B\u547C\u5438\u8282\u594F\u5F15\u5BFC").addToggle((toggle) => toggle.setValue(this.plugin.settings.enableBreathingGuide).onChange(async (value) => {
      this.plugin.settings.enableBreathingGuide = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u97F3\u6548\u53CD\u9988").setDesc("\u4E3A\u5173\u952E\u64CD\u4F5C\u63D0\u4F9B\u73AF\u5883\u97F3\u6548").addToggle((toggle) => toggle.setValue(this.plugin.settings.enableSoundFeedback).onChange(async (value) => {
      this.plugin.settings.enableSoundFeedback = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "\u6570\u636E\u4E0E\u96C6\u6210" });
    new import_obsidian.Setting(containerEl).setName("\u4FDD\u5B58\u9605\u8BFB\u8FDB\u5EA6").setDesc("\u8BB0\u4F4F\u6BCF\u4E2A\u6587\u4EF6\u7684\u9605\u8BFB\u4F4D\u7F6E").addToggle((toggle) => toggle.setValue(this.plugin.settings.persistReadingProgress).onChange(async (value) => {
      this.plugin.settings.persistReadingProgress = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u601D\u7EF4\u5BFC\u56FE\u751F\u6210").setDesc("\u9605\u8BFB\u540E\u81EA\u52A8\u751F\u6210\u6587\u6863\u601D\u7EF4\u5BFC\u56FE").addToggle((toggle) => toggle.setValue(this.plugin.settings.enableMindmapGeneration).onChange(async (value) => {
      this.plugin.settings.enableMindmapGeneration = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u4E2D\u6587\u5206\u8BCD\u652F\u6301").setDesc("\u542F\u7528\u4E2D\u6587\u667A\u80FD\u5206\u8BCD\uFF08\u63A8\u8350\u4E2D\u6587\u7528\u6237\u5F00\u542F\uFF09").addToggle((toggle) => toggle.setValue(this.plugin.settings.useChineseTokenizer).onChange(async (value) => {
      this.plugin.settings.useChineseTokenizer = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u66F4\u65B0\u7B14\u8BB0\u5143\u6570\u636E").setDesc("\u5C06\u9605\u8BFB\u8FDB\u5EA6\u4FDD\u5B58\u5230\u7B14\u8BB0\u7684frontmatter").addToggle((toggle) => toggle.setValue(this.plugin.settings.updateFileFrontmatter || false).onChange(async (value) => {
      this.plugin.settings.updateFileFrontmatter = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "\u5173\u4E8E\u4E0E\u5E2E\u52A9" });
    containerEl.createEl("p", {
      text: "RSVP \u901F\u8BFB\u589E\u5F3A\u63D2\u4EF6\u7ED3\u5408\u4E86RSVP(Rapid Serial Visual Presentation)\u6280\u672F\u4E0EObsidian\u7684\u5F3A\u5927\u77E5\u8BC6\u7BA1\u7406\u529F\u80FD\uFF0C\u65E8\u5728\u63D0\u5347\u60A8\u7684\u9605\u8BFB\u6548\u7387\u3002"
    });
    containerEl.createEl("p", {
      text: "\u5982\u679C\u60A8\u559C\u6B22\u8FD9\u4E2A\u63D2\u4EF6\uFF0C\u8BF7\u8003\u8651\u7ED9\u9879\u76EE\u70B9\u4E2A\u661F\u6807\u3002"
    });
    new import_obsidian.Setting(containerEl).setName("\u4F7F\u7528\u8BF4\u660E").setDesc("\u67E5\u770B\u63D2\u4EF6\u8BE6\u7EC6\u4F7F\u7528\u6307\u5357").addButton((button) => button.setButtonText("\u6253\u5F00\u6559\u7A0B").onClick(() => {
      const tutorialFileName = "RSVP-\u901F\u8BFB\u589E\u5F3A-\u4F7F\u7528\u6307\u5357.md";
      const tutorialPath = normalizePath(tutorialFileName);
      this.app.vault.adapter.exists(tutorialPath).then((exists) => {
        if (!exists) {
          this.createTutorialFile(tutorialPath).then(() => {
            this.openTutorialFile(tutorialPath);
          });
        } else {
          this.openTutorialFile(tutorialPath);
        }
      });
    }));
  }
  async createTutorialFile(path) {
    const content = `# RSVP \u901F\u8BFB\u589E\u5F3A \u4F7F\u7528\u6307\u5357

## \u4EC0\u4E48\u662FRSVP\u9605\u8BFB\u6CD5\uFF1F

RSVP (Rapid Serial Visual Presentation) \u662F\u4E00\u79CD\u5FEB\u901F\u8FDE\u7EED\u89C6\u89C9\u5448\u73B0\u6280\u672F\uFF0C\u901A\u8FC7\u9010\u4E2A\u663E\u793A\u5355\u8BCD\u6765\u6D88\u9664\u773C\u7403\u79FB\u52A8\uFF0C\u53EF\u4EE5\u663E\u8457\u63D0\u9AD8\u9605\u8BFB\u901F\u5EA6\u3002

## \u57FA\u7840\u64CD\u4F5C

1. **\u542F\u52A8\u901F\u8BFB**: 
   - \u70B9\u51FBribbon\u680F\u7684\u901F\u8BFB\u56FE\u6807
   - \u6216\u4F7F\u7528\u547D\u4EE4\u9762\u677F\u6267\u884C"\u542F\u52A8\u901F\u8BFB\u6A21\u5F0F"

2. **\u63A7\u5236\u9605\u8BFB**:
   - \u6682\u505C/\u7EE7\u7EED: \u7A7A\u683C\u952E\u6216\u70B9\u51FB\u64AD\u653E/\u6682\u505C\u6309\u94AE
   - \u52A0\u901F/\u51CF\u901F: \u70B9\u51FB\u{1F407}/\u{1F422}\u6309\u94AE\u6216\u4F7F\u7528\u5DE6\u53F3\u6ED1\u52A8\u624B\u52BF
   - \u8DF3\u8F6C\u6BB5\u843D: \u70B9\u51FB\u23EE/\u23ED\u6309\u94AE\u6216\u4F7F\u7528\u4E0A\u4E0B\u6ED1\u52A8\u624B\u52BF

## \u63D0\u9AD8\u6548\u7387\u7684\u5C0F\u6280\u5DE7

- \u4ECE\u4F4E\u901F\u5F00\u59CB(300wpm)\uFF0C\u9010\u6E10\u63D0\u9AD8\u5230\u8212\u9002\u503C
- \u4F7F\u7528\u547C\u5438\u5F15\u5BFC\u529F\u80FD\u4FDD\u6301\u4E13\u6CE8
- \u5BF9\u91CD\u8981\u6587\u6863\u9605\u8BFB\u540E\u751F\u6210\u601D\u7EF4\u5BFC\u56FE
- \u914D\u5408\u95F4\u9694\u590D\u4E60\u7CFB\u7EDF\u4F7F\u7528

## \u9AD8\u7EA7\u529F\u80FD

- **\u667A\u80FD\u6682\u505C**: \u5728\u6807\u70B9\u5904\u81EA\u52A8\u5EF6\u957F\u505C\u7559
- **\u8FDB\u5EA6\u4FDD\u5B58**: \u8BB0\u4F4F\u6BCF\u4E2A\u6587\u4EF6\u7684\u9605\u8BFB\u4F4D\u7F6E
- **\u4E2D\u6587\u5206\u8BCD**: \u9488\u5BF9\u4E2D\u6587\u5185\u5BB9\u7684\u667A\u80FD\u5206\u8BCD
- **\u601D\u7EF4\u5BFC\u56FE**: \u9605\u8BFB\u540E\u751F\u6210\u6587\u6863\u7ED3\u6784\u56FE

\u795D\u60A8\u9605\u8BFB\u6109\u5FEB\uFF01`;
    await this.app.vault.create(path, content);
  }
  openTutorialFile(path) {
    let fileOpened = false;
    this.app.workspace.iterateAllLeaves((leaf) => {
      if (fileOpened)
        return;
      const file = this.app.vault.getAbstractFileByPath(path);
      if (file && file instanceof TFile) {
        leaf.openFile(file);
        fileOpened = true;
      }
    });
    if (!fileOpened) {
      const file = this.app.vault.getAbstractFileByPath(path);
      if (file && file instanceof TFile) {
        this.app.workspace.openLinkText(path, "", false);
      }
    }
  }
};

// src/components/RSVPView.ts
var import_obsidian2 = require("obsidian");

// src/components/RSVPControl.ts
var RSVPControl = class {
  constructor(options) {
    this.container = options.container;
    this.plugin = options.plugin;
    this.callbacks = {
      onPlay: options.onPlay,
      onPause: options.onPause,
      onClose: options.onClose,
      onSpeedChange: options.onSpeedChange,
      onProgressChange: options.onProgressChange,
      onJumpParagraph: options.onJumpParagraph
    };
    this.controlEl = document.createElement("div");
    this.controlEl.classList.add("rsvp-control-panel");
    this.speedEl = document.createElement("div");
    this.speedEl.classList.add("rsvp-speed-display");
    this.progressEl = document.createElement("div");
    this.progressEl.classList.add("rsvp-progress-bar");
    this.playPauseBtn = document.createElement("button");
    this.playPauseBtn.classList.add("rsvp-play-pause-button");
    this.playPauseBtn.innerHTML = "\u25B6";
  }
  render(fileName, initialSpeed) {
    const titleEl = document.createElement("div");
    titleEl.classList.add("rsvp-title");
    titleEl.textContent = fileName;
    this.controlEl.appendChild(titleEl);
    const progressContainer = document.createElement("div");
    progressContainer.classList.add("rsvp-progress-container");
    const progressBg = document.createElement("div");
    progressBg.classList.add("rsvp-progress-background");
    progressBg.appendChild(this.progressEl);
    progressContainer.appendChild(progressBg);
    progressBg.addEventListener("click", (e) => {
      const rect = progressBg.getBoundingClientRect();
      const progress = (e.clientX - rect.left) / rect.width;
      this.updateProgress(progress);
      this.callbacks.onProgressChange(progress);
    });
    this.controlEl.appendChild(progressContainer);
    const controlBar = document.createElement("div");
    controlBar.classList.add("rsvp-control-bar");
    const prevBtn = document.createElement("button");
    prevBtn.classList.add("rsvp-button");
    prevBtn.innerHTML = "\u23EE";
    prevBtn.title = "\u4E0A\u4E00\u6BB5";
    prevBtn.addEventListener("click", () => this.callbacks.onJumpParagraph(false));
    controlBar.appendChild(prevBtn);
    const slowDownBtn = document.createElement("button");
    slowDownBtn.classList.add("rsvp-button");
    slowDownBtn.innerHTML = "\u{1F422}";
    slowDownBtn.title = "\u51CF\u901F";
    slowDownBtn.addEventListener("click", () => {
      const currentSpeed = parseInt(this.speedEl.textContent.replace("wpm", ""));
      this.callbacks.onSpeedChange(Math.max(200, currentSpeed - 50));
    });
    controlBar.appendChild(slowDownBtn);
    this.playPauseBtn.addEventListener("click", () => {
      if (this.playPauseBtn.innerHTML === "\u25B6") {
        this.playPauseBtn.innerHTML = "\u23F8";
        this.callbacks.onPlay();
      } else {
        this.playPauseBtn.innerHTML = "\u25B6";
        this.callbacks.onPause();
      }
    });
    controlBar.appendChild(this.playPauseBtn);
    const speedUpBtn = document.createElement("button");
    speedUpBtn.classList.add("rsvp-button");
    speedUpBtn.innerHTML = "\u{1F407}";
    speedUpBtn.title = "\u52A0\u901F";
    speedUpBtn.addEventListener("click", () => {
      const currentSpeed = parseInt(this.speedEl.textContent.replace("wpm", ""));
      this.callbacks.onSpeedChange(Math.min(1200, currentSpeed + 50));
    });
    controlBar.appendChild(speedUpBtn);
    const nextBtn = document.createElement("button");
    nextBtn.classList.add("rsvp-button");
    nextBtn.innerHTML = "\u23ED";
    nextBtn.title = "\u4E0B\u4E00\u6BB5";
    nextBtn.addEventListener("click", () => this.callbacks.onJumpParagraph(true));
    controlBar.appendChild(nextBtn);
    const closeBtn = document.createElement("button");
    closeBtn.classList.add("rsvp-button", "rsvp-close-button");
    closeBtn.innerHTML = "\u2716";
    closeBtn.title = "\u5173\u95ED";
    closeBtn.addEventListener("click", () => this.callbacks.onClose());
    controlBar.appendChild(closeBtn);
    this.controlEl.appendChild(controlBar);
    const infoBar = document.createElement("div");
    infoBar.classList.add("rsvp-info-bar");
    this.speedEl.textContent = `${initialSpeed}wpm`;
    infoBar.appendChild(this.speedEl);
    if (this.plugin.settings.enableBreathingGuide) {
      const breathEl = document.createElement("div");
      breathEl.classList.add("rsvp-breath-guide");
      breathEl.innerHTML = '\u{1F32C} <span class="breath-animation">\u25C9</span>';
      infoBar.appendChild(breathEl);
    }
    this.controlEl.appendChild(infoBar);
    const tipEl = document.createElement("div");
    tipEl.classList.add("rsvp-tip");
    tipEl.textContent = "\u63D0\u793A: \u7A7A\u683C\u952E = \u6682\u505C/\u7EE7\u7EED";
    this.controlEl.appendChild(tipEl);
    this.container.appendChild(this.controlEl);
  }
  updateSpeed(speed) {
    this.speedEl.textContent = `${speed}wpm`;
    if (speed > 800) {
      this.speedEl.classList.add("rsvp-speed-high");
      this.speedEl.classList.remove("rsvp-speed-normal", "rsvp-speed-low");
    } else if (speed > 400) {
      this.speedEl.classList.add("rsvp-speed-normal");
      this.speedEl.classList.remove("rsvp-speed-high", "rsvp-speed-low");
    } else {
      this.speedEl.classList.add("rsvp-speed-low");
      this.speedEl.classList.remove("rsvp-speed-high", "rsvp-speed-normal");
    }
  }
  updateProgress(progress) {
    const percentage = Math.min(100, Math.max(0, progress * 100));
    this.progressEl.style.width = `${percentage}%`;
    this.progressEl.classList.remove("progress-wave-animation");
    void this.progressEl.offsetWidth;
    this.progressEl.classList.add("progress-wave-animation");
  }
  updatePlayState(isPaused) {
    if (isPaused) {
      this.playPauseBtn.innerHTML = "\u25B6";
    } else {
      this.playPauseBtn.innerHTML = "\u23F8";
    }
  }
  showCompletionMessage() {
    const message = document.createElement("div");
    message.classList.add("rsvp-completion-message");
    message.textContent = "\u9605\u8BFB\u5B8C\u6210\uFF01";
    const feedback = document.createElement("div");
    feedback.classList.add("rsvp-feedback");
    feedback.innerHTML = "\u{1F3AF} \u6709\u4EC0\u4E48\u611F\u60F3\uFF1F";
    feedback.addEventListener("click", () => {
    });
    message.appendChild(feedback);
    this.controlEl.appendChild(message);
    setTimeout(() => {
      if (message.parentNode === this.controlEl) {
        this.controlEl.removeChild(message);
      }
    }, 3e3);
  }
};

// src/components/RSVPView.ts
var RSVPView = class {
  constructor(options) {
    this.currentPosition = 0;
    this.isPaused = true;
    this.content = options.content;
    this.fileName = options.fileName;
    this.initialPosition = options.initialPosition;
    this.container = options.container;
    this.plugin = options.plugin;
    this.engine = options.engine;
    this.dataPersister = options.dataPersister;
    this.file = options.file;
    this.currentSpeed = this.plugin.settings.defaultSpeed;
    this.viewEl = document.createElement("div");
    this.viewEl.classList.add("rsvp-reader-container");
    const displayContainer = document.createElement("div");
    displayContainer.classList.add("rsvp-display-container");
    this.wordEl = document.createElement("div");
    this.wordEl.classList.add("rsvp-word");
    this.wordEl.style.fontSize = `${this.plugin.settings.fontSize}px`;
    displayContainer.appendChild(this.wordEl);
    this.viewEl.appendChild(displayContainer);
    this.control = new RSVPControl({
      container: this.viewEl,
      plugin: this.plugin,
      onPlay: () => this.play(),
      onPause: () => this.pause(),
      onClose: () => this.destroy(),
      onSpeedChange: (speed) => this.setSpeed(speed),
      onProgressChange: (progress) => this.setProgress(progress),
      onJumpParagraph: (forward) => this.jumpParagraph(forward)
    });
    this.registerGestures();
  }
  render() {
    this.container.appendChild(this.viewEl);
    this.engine.processText(this.content, this.initialPosition);
    this.control.render(this.fileName, this.currentSpeed);
    this.showCurrentWord();
  }
  play() {
    this.isPaused = false;
    this.control.updatePlayState(false);
    this.readNextWord();
  }
  pause() {
    this.isPaused = true;
    this.control.updatePlayState(true);
  }
  togglePause() {
    if (this.isPaused) {
      this.play();
    } else {
      this.pause();
    }
  }
  destroy() {
    if (this.plugin.settings.persistReadingProgress && this.file) {
      this.dataPersister.saveReadingProgress(this.file, {
        position: this.currentPosition,
        timestamp: Date.now()
      });
    }
    this.pause();
    if (this.viewEl && this.viewEl.parentElement) {
      this.viewEl.parentElement.removeChild(this.viewEl);
    }
    this.plugin.rsvpView = null;
  }
  increaseSpeed(amount) {
    this.setSpeed(this.currentSpeed + amount);
  }
  decreaseSpeed(amount) {
    this.setSpeed(Math.max(200, this.currentSpeed - amount));
  }
  setSpeed(speed) {
    this.currentSpeed = Math.min(1200, Math.max(200, speed));
    this.control.updateSpeed(this.currentSpeed);
  }
  setReadingPosition(position) {
    this.currentPosition = position;
    this.engine.setCurrentPosition(position);
    this.showCurrentWord();
    this.control.updateProgress(this.engine.getReadingProgress());
  }
  setProgress(progress) {
    const position = Math.floor(progress * this.engine.getTotalWords());
    this.setReadingPosition(position);
  }
  jumpParagraph(forward) {
    if (forward) {
      this.engine.jumpToNextParagraph();
    } else {
      this.engine.jumpToPreviousParagraph();
    }
    this.currentPosition = this.engine.getCurrentPosition();
    this.showCurrentWord();
    this.control.updateProgress(this.engine.getReadingProgress());
  }
  readNextWord() {
    if (this.isPaused)
      return;
    const nextWord = this.engine.getNextWord();
    if (nextWord) {
      this.currentPosition = this.engine.getCurrentPosition();
      this.showCurrentWord();
      this.control.updateProgress(this.engine.getReadingProgress());
      const displayTime = this.engine.getDisplayTimeForCurrentWord(this.currentSpeed);
      if (this.plugin.settings.enableBreathingGuide) {
        this.updateBreathingGuide();
      }
      setTimeout(() => this.readNextWord(), displayTime);
    } else {
      this.pause();
      this.control.showCompletionMessage();
      if (this.plugin.settings.enableMindmapGeneration) {
        this.generateMindmap();
      }
    }
  }
  showCurrentWord() {
    const wordData = this.engine.getCurrentWordData();
    if (!wordData)
      return;
    this.wordEl.innerHTML = "";
    if (this.plugin.settings.highlightFocusWord) {
      const beforeFocus = document.createElement("span");
      beforeFocus.classList.add("rsvp-before-focus");
      beforeFocus.style.color = this.plugin.settings.beforeFocusColor;
      beforeFocus.textContent = wordData.word.substring(0, wordData.focusPoint);
      const focus = document.createElement("span");
      focus.classList.add("rsvp-focus");
      focus.style.color = this.plugin.settings.focusWordColor;
      focus.textContent = wordData.word.charAt(wordData.focusPoint);
      const afterFocus = document.createElement("span");
      afterFocus.classList.add("rsvp-after-focus");
      afterFocus.style.color = this.plugin.settings.afterFocusColor;
      afterFocus.textContent = wordData.word.substring(wordData.focusPoint + 1);
      this.wordEl.appendChild(beforeFocus);
      this.wordEl.appendChild(focus);
      this.wordEl.appendChild(afterFocus);
    } else {
      this.wordEl.textContent = wordData.word;
    }
    if (wordData.isWikiLink) {
      this.wordEl.classList.add("rsvp-wikilink");
    } else {
      this.wordEl.classList.remove("rsvp-wikilink");
    }
    if (wordData.isKeyword) {
      this.wordEl.classList.add("rsvp-keyword");
    } else {
      this.wordEl.classList.remove("rsvp-keyword");
    }
  }
  updateBreathingGuide() {
    const wordPerSecond = this.currentSpeed / 60;
  }
  generateMindmap() {
    var _a;
    const mindmapContent = this.engine.generateMindmap();
    if (this.file) {
      const mindmapFileName = `${this.file.basename}-\u601D\u7EF4\u5BFC\u56FE.md`;
      const mindmapPath = (0, import_obsidian2.normalizePath)(`${((_a = this.file.parent) == null ? void 0 : _a.path) || ""}/${mindmapFileName}`);
      this.app.vault.create(mindmapPath, mindmapContent).then(() => {
        new Notice(`\u5DF2\u751F\u6210\u601D\u7EF4\u5BFC\u56FE\uFF1A${mindmapFileName}`);
      }).catch((err) => {
        console.error("\u601D\u7EF4\u5BFC\u56FE\u751F\u6210\u5931\u8D25", err);
        new Notice("\u601D\u7EF4\u5BFC\u56FE\u751F\u6210\u5931\u8D25");
      });
    }
  }
  registerGestures() {
    let startX = 0;
    let startY = 0;
    this.viewEl.addEventListener("touchstart", (e) => {
      startX = e.touches[0].clientX;
      startY = e.touches[0].clientY;
    });
    this.viewEl.addEventListener("touchend", (e) => {
      const endX = e.changedTouches[0].clientX;
      const endY = e.changedTouches[0].clientY;
      const diffX = endX - startX;
      const diffY = endY - startY;
      if (Math.abs(diffX) > Math.abs(diffY)) {
        if (diffX > 50) {
          this.decreaseSpeed(50);
        } else if (diffX < -50) {
          this.increaseSpeed(50);
        }
      } else {
        if (diffY < -50) {
          this.jumpParagraph(true);
        } else if (diffY > 50) {
          this.jumpParagraph(false);
        }
      }
    });
  }
};

// src/models/RSVPEngine.ts
var RSVPEngine = class {
  constructor(settings, textProcessor) {
    this.words = [];
    this.currentPosition = 0;
    this.paragraphBreakPoints = [];
    this.settings = settings;
    this.textProcessor = textProcessor;
  }
  updateSettings(settings) {
    this.settings = settings;
  }
  processText(text, initialPosition) {
    const processedText = this.textProcessor.processMarkdown(text);
    this.words = [];
    this.paragraphBreakPoints = [];
    let startPosition = 0;
    let currentWordIndex = 0;
    if (initialPosition) {
      const textBefore = text.split("\n").slice(0, initialPosition.line).join("\n") + text.split("\n")[initialPosition.line].substring(0, initialPosition.ch);
      startPosition = this.textProcessor.approximateWordPosition(text, textBefore);
    }
    processedText.paragraphs.forEach((paragraph, pIndex) => {
      paragraph.words.forEach((word, wIndex) => {
        const focusPoint = this.calculateFocusPoint(word);
        this.words.push({
          word,
          isWikiLink: paragraph.wikiLinks.includes(word),
          isKeyword: paragraph.keywords.includes(word),
          isPunctuation: this.isPunctuation(word),
          focusPoint,
          paragraphBreak: false
        });
        currentWordIndex++;
      });
      if (this.words.length > 0) {
        this.words[this.words.length - 1].paragraphBreak = true;
        this.paragraphBreakPoints.push(this.words.length - 1);
      }
    });
    this.setCurrentPosition(startPosition);
  }
  getNextWord() {
    if (this.currentPosition >= this.words.length - 1) {
      return null;
    }
    this.currentPosition++;
    return this.getCurrentWordData();
  }
  getCurrentWordData() {
    if (this.currentPosition >= 0 && this.currentPosition < this.words.length) {
      return this.words[this.currentPosition];
    }
    return null;
  }
  getCurrentPosition() {
    return this.currentPosition;
  }
  setCurrentPosition(position) {
    this.currentPosition = Math.max(0, Math.min(position, this.words.length - 1));
  }
  getTotalWords() {
    return this.words.length;
  }
  getReadingProgress() {
    if (this.words.length === 0)
      return 0;
    return this.currentPosition / (this.words.length - 1);
  }
  getDisplayTimeForCurrentWord(baseSpeed) {
    const wordData = this.getCurrentWordData();
    if (!wordData)
      return 6e4 / baseSpeed;
    let displayTime = 6e4 / baseSpeed;
    if (this.settings.enableIntelligentPause && wordData.isPunctuation) {
      displayTime *= this.settings.pauseMultiplierForPunctuation;
    }
    if (wordData.paragraphBreak) {
      displayTime *= 1.5;
    }
    if (wordData.word.length > 8) {
      displayTime *= 1.2;
    }
    return displayTime;
  }
  jumpToNextParagraph() {
    for (const breakPoint of this.paragraphBreakPoints) {
      if (breakPoint > this.currentPosition) {
        this.setCurrentPosition(breakPoint + 1);
        return;
      }
    }
    this.setCurrentPosition(this.words.length - 1);
  }
  jumpToPreviousParagraph() {
    let prevBreak = 0;
    for (const breakPoint of this.paragraphBreakPoints) {
      if (breakPoint >= this.currentPosition) {
        break;
      }
      prevBreak = breakPoint;
    }
    this.setCurrentPosition(prevBreak);
  }
  generateMindmap() {
    let mindmapContent = "# \u6587\u6863\u601D\u7EF4\u5BFC\u56FE\n\n";
    const keywords = /* @__PURE__ */ new Set();
    this.words.forEach((word) => {
      if (word.isKeyword) {
        keywords.add(word.word);
      }
    });
    const structureAnalysis = this.textProcessor.analyzeDocumentStructure();
    mindmapContent += "## \u6838\u5FC3\u6982\u5FF5\n\n";
    keywords.forEach((keyword) => {
      mindmapContent += `- ${keyword}
`;
    });
    mindmapContent += "\n## \u6587\u6863\u7ED3\u6784\n\n";
    structureAnalysis.forEach((section, index) => {
      const indent = "  ".repeat(section.level - 1);
      mindmapContent += `${indent}- ${section.title}
`;
    });
    return mindmapContent;
  }
  calculateFocusPoint(word) {
    const wordLength = word.length;
    if (wordLength <= 1)
      return 0;
    return Math.min(Math.floor(wordLength / 3), 2);
  }
  isPunctuation(word) {
    const punctuations = [".", ",", "!", "?", ";", ":", "\u3002", "\uFF0C", "\uFF01", "\uFF1F", "\uFF1B", "\uFF1A", "\u3001"];
    return punctuations.includes(word[word.length - 1]);
  }
};

// src/utils/ChineseTokenizer.ts
var ChineseTokenizer = class {
  constructor() {
    this.segmentDict = /* @__PURE__ */ new Map();
    const commonWords = [
      "\u7814\u7A76",
      "\u5B66\u4E60",
      "\u65B9\u6CD5",
      "\u77E5\u8BC6",
      "\u7BA1\u7406",
      "\u7CFB\u7EDF",
      "\u601D\u7EF4",
      "\u5DE5\u4F5C",
      "\u6548\u7387",
      "\u63D0\u9AD8",
      "\u589E\u5F3A",
      "\u8BB0\u5FC6",
      "\u7406\u89E3",
      "\u5206\u6790",
      "\u6587\u7AE0",
      "\u9605\u8BFB",
      "\u901F\u5EA6",
      "\u8BA4\u77E5",
      "\u7B14\u8BB0",
      "\u590D\u4E60",
      "\u603B\u7ED3",
      "\u5B9E\u8DF5",
      "\u5E94\u7528",
      "\u6280\u5DE7"
    ];
    commonWords.forEach((word) => {
      this.segmentDict.set(word, 1);
    });
  }
  tokenize(text) {
    const result = [];
    let start = 0;
    while (start < text.length) {
      let foundMatch = false;
      let end = Math.min(start + 4, text.length);
      while (end > start) {
        const segment = text.substring(start, end);
        if (this.segmentDict.has(segment)) {
          result.push(segment);
          start = end;
          foundMatch = true;
          break;
        }
        end--;
      }
      if (!foundMatch) {
        if (/[a-zA-Z0-9]/.test(text[start])) {
          let wordEnd = start;
          while (wordEnd < text.length && /[a-zA-Z0-9]/.test(text[wordEnd])) {
            wordEnd++;
          }
          result.push(text.substring(start, wordEnd));
          start = wordEnd;
        } else if (/[，。！？；：""''（）、]/.test(text[start])) {
          if (result.length > 0) {
            result[result.length - 1] += text[start];
          } else {
            result.push(text[start]);
          }
          start++;
        } else {
          result.push(text[start]);
          start++;
        }
      }
    }
    return result;
  }
};

// src/utils/MarkdownParser.ts
var MarkdownParser = class {
  // 处理Markdown文本，提取纯文本内容和结构
  cleanMarkdown(markdown) {
    let cleanText = markdown;
    const wikiLinks = [];
    const wikiLinkRegex = /\[\[([^\]]+)\]\]/g;
    let match;
    while (match = wikiLinkRegex.exec(markdown)) {
      const linkText = match[1].split("|")[0];
      wikiLinks.push(linkText);
      const displayText = match[1].includes("|") ? match[1].split("|")[1] : linkText;
      cleanText = cleanText.replace(match[0], displayText);
    }
    cleanText = cleanText.replace(/```[\s\S]*?```/g, "");
    cleanText = cleanText.replace(/`[^`]*`/g, "");
    cleanText = cleanText.replace(/!\[([^\]]*)\]\([^)]+\)/g, "");
    cleanText = cleanText.replace(/\[([^\]]+)\]\([^)]+\)/g, "$1");
    cleanText = cleanText.replace(/<[^>]*>/g, "");
    cleanText = cleanText.replace(/(\*\*|__)(.*?)\1/g, "$2");
    cleanText = cleanText.replace(/(\*|_)(.*?)\1/g, "$2");
    cleanText = cleanText.replace(/^\s*[-*_]{3,}\s*$/gm, "\n");
    cleanText = cleanText.replace(/^#+\s+(.*?)$/gm, "$1\n");
    return { cleanText, wikiLinks };
  }
  parseDocumentStructure(markdown) {
    const structure = [];
    const headingRegex = /^(#{1,6})\s+(.*?)$/gm;
    let match;
    while (match = headingRegex.exec(markdown)) {
      const level = match[1].length;
      const title = match[2].trim();
      const position = match.index;
      structure.push({ level, title, position });
    }
    return structure;
  }
};

// src/models/TextProcessor.ts
var TextProcessor = class {
  constructor(useChineseTokenizer) {
    this.rawText = "";
    this.processedStructure = [];
    this.useChineseTokenizer = useChineseTokenizer;
    this.chineseTokenizer = new ChineseTokenizer();
    this.markdownParser = new MarkdownParser();
  }
  processMarkdown(text) {
    this.rawText = text;
    this.processedStructure = this.markdownParser.parseDocumentStructure(text);
    const { cleanText, wikiLinks } = this.markdownParser.cleanMarkdown(text);
    const keywords = this.extractKeywords(cleanText);
    const paragraphs = [];
    const paragraphTexts = cleanText.split(/\n\s*\n/);
    paragraphTexts.forEach((paragraphText) => {
      if (!paragraphText.trim())
        return;
      const words = this.tokenizeText(paragraphText);
      const paragraphWikiLinks = this.findWikiLinksInParagraph(paragraphText, wikiLinks);
      const paragraphKeywords = this.findKeywordsInParagraph(paragraphText, keywords);
      paragraphs.push({
        words,
        wikiLinks: paragraphWikiLinks,
        keywords: paragraphKeywords
      });
    });
    return { paragraphs };
  }
  approximateWordPosition(fullText, textBeforeCursor) {
    const { paragraphs } = this.processMarkdown(fullText);
    const allWords = paragraphs.flatMap((p) => p.words);
    const { paragraphs: beforeCursorParagraphs } = this.processMarkdown(textBeforeCursor);
    const beforeCursorWords = beforeCursorParagraphs.flatMap((p) => p.words);
    return Math.min(beforeCursorWords.length, allWords.length - 1);
  }
  analyzeDocumentStructure() {
    return this.processedStructure;
  }
  tokenizeText(text) {
    if (this.useChineseTokenizer && this.containsChinese(text)) {
      return this.chineseTokenizer.tokenize(text);
    }
    return text.trim().split(/\s+/).filter((word) => word.length > 0);
  }
  containsChinese(text) {
    const chineseRegex = /[\u4e00-\u9fa5]/;
    return chineseRegex.test(text);
  }
  extractKeywords(text) {
    const stopwords = /* @__PURE__ */ new Set(["\u7684", "\u662F", "\u5728", "\u4E86", "\u548C", "\u4E0E", "\u6216", "\u5BF9", "\u4E14", "the", "a", "an", "is", "are", "in", "on", "at", "to", "for", "with", "by", "of", "and", "or"]);
    const words = this.tokenizeText(text);
    const wordCounts = {};
    words.forEach((word) => {
      if (!stopwords.has(word.toLowerCase()) && word.length > 1) {
        wordCounts[word] = (wordCounts[word] || 0) + 1;
      }
    });
    const sortedWords = Object.entries(wordCounts).sort((a, b) => b[1] - a[1]).slice(0, 10).map((entry) => entry[0]);
    return sortedWords;
  }
  findWikiLinksInParagraph(paragraphText, allWikiLinks) {
    return allWikiLinks.filter((link) => paragraphText.includes(link));
  }
  findKeywordsInParagraph(paragraphText, allKeywords) {
    return allKeywords.filter((keyword) => paragraphText.includes(keyword));
  }
};

// src/utils/DataPersister.ts
var DataPersister = class {
  constructor(plugin) {
    this.readingProgressMap = /* @__PURE__ */ new Map();
    this.plugin = plugin;
    this.loadAllReadingProgress();
  }
  async saveReadingProgress(file, progress) {
    this.readingProgressMap.set(file.path, progress);
    await this.saveAllReadingProgress();
    if (this.plugin.settings.updateFileFrontmatter) {
      await this.updateFileFrontmatter(file, progress);
    }
  }
  async loadReadingProgress(file) {
    return this.readingProgressMap.get(file.path);
  }
  async loadAllReadingProgress() {
    const data = await this.plugin.loadData();
    if (data && data.readingProgress) {
      Object.entries(data.readingProgress).forEach(([path, progress]) => {
        this.readingProgressMap.set(path, progress);
      });
    }
  }
  async saveAllReadingProgress() {
    const data = await this.plugin.loadData() || {};
    data.readingProgress = {};
    this.readingProgressMap.forEach((progress, path) => {
      data.readingProgress[path] = progress;
    });
    await this.plugin.saveData(data);
  }
  async updateFileFrontmatter(file, progress) {
    const content = await this.plugin.app.vault.read(file);
    const frontmatterRegex = /^---\n([\s\S]*?)\n---/;
    const match = content.match(frontmatterRegex);
    let newContent;
    const readingTime = new Date(progress.timestamp).toISOString();
    const readingProgressPercentage = progress.position;
    if (match) {
      let frontmatter = match[1];
      if (frontmatter.includes("rsvp_last_position:")) {
        frontmatter = frontmatter.replace(/rsvp_last_position:.*$/m, `rsvp_last_position: ${progress.position}`);
      } else {
        frontmatter += `
rsvp_last_position: ${progress.position}`;
      }
      if (frontmatter.includes("rsvp_last_read:")) {
        frontmatter = frontmatter.replace(/rsvp_last_read:.*$/m, `rsvp_last_read: ${readingTime}`);
      } else {
        frontmatter += `
rsvp_last_read: ${readingTime}`;
      }
      newContent = content.replace(frontmatterRegex, `---
${frontmatter}
---`);
    } else {
      const newFrontmatter = `---
rsvp_last_position: ${progress.position}
rsvp_last_read: ${readingTime}
---`;
      newContent = `${newFrontmatter}

${content}`;
    }
    await this.plugin.app.vault.modify(file, newContent);
  }
};

// main.ts
var DEFAULT_SETTINGS = {
  defaultSpeed: 400,
  enableIntelligentPause: true,
  pauseMultiplierForPunctuation: 1.5,
  highlightFocusWord: true,
  enableBreathingGuide: false,
  enableSoundFeedback: false,
  focusWordColor: "#ff5555",
  beforeFocusColor: "#aaaaaa",
  afterFocusColor: "#aaaaaa",
  fontSize: 24,
  persistReadingProgress: true,
  enableMindmapGeneration: false,
  useChineseTokenizer: true
};
var RSVPReaderPlugin = class extends import_obsidian3.Plugin {
  constructor() {
    super(...arguments);
    this.rsvpView = null;
  }
  async onload() {
    console.log("\u52A0\u8F7D RSVP \u901F\u8BFB\u589E\u5F3A\u63D2\u4EF6");
    await this.loadSettings();
    this.textProcessor = new TextProcessor(this.settings.useChineseTokenizer);
    this.dataPersister = new DataPersister(this);
    this.engine = new RSVPEngine(this.settings, this.textProcessor);
    this.addRibbonIcon("play-circle", "\u542F\u52A8\u901F\u8BFB\u6A21\u5F0F", async (evt) => {
      this.activateRSVPReader();
    });
    this.addCommand({
      id: "start-rsvp-reader",
      name: "\u542F\u52A8\u901F\u8BFB\u6A21\u5F0F",
      editorCallback: (editor, view) => {
        this.activateRSVPReader();
      }
    });
    this.addCommand({
      id: "increase-rsvp-speed",
      name: "\u63D0\u9AD8\u901F\u8BFB\u901F\u5EA6",
      callback: () => {
        if (this.rsvpView) {
          this.rsvpView.increaseSpeed(50);
        }
      }
    });
    this.addCommand({
      id: "decrease-rsvp-speed",
      name: "\u964D\u4F4E\u901F\u8BFB\u901F\u5EA6",
      callback: () => {
        if (this.rsvpView) {
          this.rsvpView.decreaseSpeed(50);
        }
      }
    });
    this.addSettingTab(new RSVPSettingTab(this.app, this));
    this.registerDomEvent(document, "keydown", (evt) => {
      if (this.rsvpView && evt.key === " ") {
        this.rsvpView.togglePause();
        evt.preventDefault();
      }
    });
  }
  onunload() {
    console.log("\u5378\u8F7D RSVP \u901F\u8BFB\u589E\u5F3A\u63D2\u4EF6");
    if (this.rsvpView) {
      this.rsvpView.destroy();
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    if (this.engine) {
      this.engine.updateSettings(this.settings);
    }
  }
  activateRSVPReader() {
    var _a;
    const activeLeaf = this.app.workspace.activeLeaf;
    if (activeLeaf) {
      const view = activeLeaf.view;
      if (view instanceof import_obsidian3.MarkdownView) {
        const editor = view.editor;
        const cursorPos = editor.getCursor();
        const fileContent = editor.getValue();
        const fileName = ((_a = view.file) == null ? void 0 : _a.basename) || "\u672A\u547D\u540D";
        if (this.rsvpView) {
          this.rsvpView.destroy();
        }
        this.rsvpView = new RSVPView({
          content: fileContent,
          fileName,
          initialPosition: cursorPos,
          container: document.body,
          plugin: this,
          engine: this.engine,
          dataPersister: this.dataPersister,
          file: view.file
        });
        this.rsvpView.render();
        if (this.settings.persistReadingProgress && view.file) {
          this.dataPersister.loadReadingProgress(view.file).then((progress) => {
            if (progress && this.rsvpView) {
              this.rsvpView.setReadingPosition(progress.position);
            }
          });
        }
      } else {
        new Notice("\u8BF7\u5728Markdown\u7F16\u8F91\u533A\u57DF\u4E2D\u4F7F\u7528\u901F\u8BFB\u529F\u80FD");
      }
    }
  }
};
//# sourceMappingURL=data:application/json;base64,
